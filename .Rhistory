# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
18.4 / .13
n.row.fact <- 10 ; real.rows.factor = 100 ; n.col <- 100;
# n.row.fact <- 10 ; real.rows.factor = 2 ; n.col <- 4;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 10:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
set.seed(100)
# n.col <- 100; n.row = 40000
# With these params, fastest index fn get 77 secs. Faster index fn gets 320 secs (4 times faster):
# n.row.fact <- 20000 ; real.rows.factor = 20 ; n.col <- 400;
# With the below, I have fastest 0.13; faster 0.185; naive 18.4 secs :
# n.row.fact <- 1000 ; real.rows.factor = 5 ; n.col <- 100;
n.row.fact <- 100 ; real.rows.factor = 100 ; n.col <- 100;
# n.row.fact <- 10 ; real.rows.factor = 2 ; n.col <- 4;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 10:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
if (T) {
print(system.time(
fisherIndfaster.ret <- fisherIndfaster(Q_consol = Q.mat.consol$mat,
P_consol = P.mat.consol$mat,
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (T) {
print(system.time(
fisherIndfastest.ret <- fisherIndfastest(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
try( print(summary(fisherInd.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfaster.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfaster.ret)) )
try( print(summary(fisherIndfastest.ret - fisherInd.ret)) )
112.533 / 0.014
112.533 / 0.014 /300
library(devtools)
install_github("metacran/cranlogs")
library(cranlogs)
cran_downloads(when = "last-week", package = c("magrittr", "dplyr"))
cran_downloads(when = "last-week", package = c("magrittr", "dplyr", "MicEcon"))
cran_downloads(when = "last-month", package = c("magrittr", "dplyr", "MicEcon"))
cran_downloads(when = "last-year", package = c("magrittr", "dplyr", "MicEcon"))
cran_downloads(package = c( "MicEcon"), from = "2014-01-01", to = "2014-02-01"))
cran_downloads(package = c( "MicEcon"), from = "2014-01-01", to = "2014-02-01")
cran_downloads(package = c( "MicEcon"), from = "2014-01-01", to = "2016-02-01")
cran_downloads(package = c( "micEcon"), from = "2014-01-01", to = "2016-02-01")
cran_downloads(package = c( "micEcon"), from = "2014-01-01", to = "2016-06-01")
mat <- matrix(sin(1:1e6), ncol=1000)
dat <- data.frame(I=sample.int(nrow(mat), 1e6, rep=T),
J=sample.int(ncol(mat), 1e6, rep=T))
system.time( x <- mat[cbind(dat$I, dat$J)] )     # 0.51 seconds
system.time( mat[dat$I + (dat$J-1L)*nrow(mat)] ) # 0.44 seconds
system.time( x <- mat[cbind(dat$I, dat$J)] )     # 0.51 seconds
system.time( mat[dat$I + (dat$J-1L)*nrow(mat)] ) # 0.44 seconds
system.time( x <- mat[cbind(dat$I, dat$J)] )     # 0.51 seconds
system.time( y <- mat[dat$I + (dat$J-1L)*nrow(mat)] ) # 0.44 seconds
identical(x, y)
library(PQindex)
14,
linspacetest(c(1, 14, 5))
linspacetest(c(0, 1, 14, 5))
linspacetest(c(0, 1, 5, 14))
regspacetest(c(0, 1, 5, 14))
library(PQindex)
regspacetest(c(0, 1, 5, 14))
library(PQindex)
regspacetest(c(1, 5, 14))
regspacetest(c(1, 5, 16))
regspacetest(c(1, 50, 16))
print(object.size(matrix(runif(1), ncol = 1000, nrow = 1000), un = "Mb")
)
print(object.size(matrix(runif(1), ncol = 1000, nrow = 1000)), un = "Mb")
print(object.size(matrix(runif(1), ncol = 1000, nrow = 10000)), un = "Mb")
1000 * 10000
print(object.size(matrix(runif(1), ncol = 1000, nrow = 100000)), un = "Mb")
1e+08 / 30000
test <- matrix(1:4, ncol = 2)
test[1:3]
test
library(PQindex)
library(data.table)
library(Matrix)
consol.matrix <- function(x) {
if (!is.data.table(x)) x <- as.data.table(x)
x.ret <- x[, .(.N), by = names(x)]
N.ret <- matrix(x.ret$N, ncol = 1)
x.ret[, N := NULL]
list(mat = as.matrix(x.ret), freq = N.ret)
}
set.seed(100)
# n.col <- 100; n.row = 40000
# With these params, fastest index fn get 77 secs. Faster index fn gets 320 secs (4 times faster):
# n.row.fact <- 20000 ; real.rows.factor = 20 ; n.col <- 400;
# With the below, I have fastest 0.13; faster 0.185; naive 18.4 secs :
# n.row.fact <- 1000 ; real.rows.factor = 5 ; n.col <- 100;
# With below, I get fastest 0.013; faster 0.014; naive 112.533:
n.row.fact <- 100 ; real.rows.factor = 100 ; n.col <- 100;
# n.row.fact <- 10 ; real.rows.factor = 2 ; n.col <- 4;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 10:ncol(Q.mat)] <- 0
# Making the matrix sparse
if (T) {
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
if (T) {
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
library(PQindex)
library(data.table)
library(Matrix)
consol.matrix <- function(x) {
if (!is.data.table(x)) x <- as.data.table(x)
x.ret <- x[, .(.N), by = names(x)]
N.ret <- matrix(x.ret$N, ncol = 1)
x.ret[, N := NULL]
list(mat = as.matrix(x.ret), freq = N.ret)
}
set.seed(100)
# n.col <- 100; n.row = 40000
# With these params, fastest index fn get 77 secs. Faster index fn gets 320 secs (4 times faster):
# n.row.fact <- 20000 ; real.rows.factor = 20 ; n.col <- 400;
# With the below, I have fastest 0.13; faster 0.185; naive 18.4 secs :
# n.row.fact <- 1000 ; real.rows.factor = 5 ; n.col <- 100;
# With below, I get fastest 0.013; faster 0.014; naive 112.533:
n.row.fact <- 100 ; real.rows.factor = 100 ; n.col <- 100;
# n.row.fact <- 10 ; real.rows.factor = 2 ; n.col <- 4;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 10:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
if (F) {
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
}
if (F) {
print(system.time(
fisherIndfast.ret <-
fisherIndfast(Q = Q.mat, P = P.mat,
Q_consol = Q.mat.consol$mat,
P_consol = P.mat.consol$mat,
Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq ) # t(P.mat.consol$freq ))
))
}
if (T) {
print(system.time(
fisherIndfaster.ret <- fisherIndfaster(Q_consol = Q.mat.consol$mat,
P_consol = P.mat.consol$mat,
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (T) {
print(system.time(
fisherIndfastest.ret <- fisherIndfastest(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (T) {
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
library(Rcpp)
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(PQindex)
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
ddition
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
if (T) {
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = Q.mat.consol$freq,
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
eationstr
str(Q.mat.consol$freq)
str(P.mat.consol$freq)
str(Q.mat.consol$freq)
if (T) {
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = Q.mat.consol$freq,
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
1e+08
1e+08
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
_
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
8.9000e+01
4.2950e+09
1.0000e+00
4.2950e+09
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
try( print(summary(fisherIndfastest.ret - fisherIndfastestfurious.ret)) )
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
try( print(summary(fisherInd.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfaster.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfaster.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfastestfurious.ret)) )
try( print(summary(fisherIndfastest.ret - fisherInd.ret)) )
try( print(summary(fisherInd.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfaster.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfaster.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfastestfurious.ret)) )
try( print(summary(fisherIndfastest.ret - fisherInd.ret)) )
library(data.table)
library(Matrix)
consol.matrix <- function(x) {
if (!is.data.table(x)) x <- as.data.table(x)
x.ret <- x[, .(.N), by = names(x)]
N.ret <- matrix(x.ret$N, ncol = 1)
x.ret[, N := NULL]
list(mat = as.matrix(x.ret), freq = N.ret)
}
set.seed(100)
# n.col <- 100; n.row = 40000
# With these params, fastest index fn get 77 secs. Faster index fn gets 320 secs (4 times faster):
# n.row.fact <- 20000 ; real.rows.factor = 20 ; n.col <- 400;
# With the below, I have fastest 0.13; faster 0.185; naive 18.4 secs :
n.row.fact <- 1000 ; real.rows.factor = 5 ; n.col <- 100;
# With below, I get fastest 0.013; faster 0.014; naive 112.533:
# n.row.fact <- 100 ; real.rows.factor = 100 ; n.col <- 100;
# n.row.fact <- 10 ; real.rows.factor = 2 ; n.col <- 4;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 3:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
if (F) {
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
}
if (F) {
print(system.time(
fisherIndfast.ret <-
fisherIndfast(Q = Q.mat, P = P.mat,
Q_consol = Q.mat.consol$mat,
P_consol = P.mat.consol$mat,
Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq ) # t(P.mat.consol$freq ))
))
}
if (T) {
print(system.time(
fisherIndfaster.ret <- fisherIndfaster(Q_consol = Q.mat.consol$mat,
P_consol = P.mat.consol$mat,
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (T) {
print(system.time(
fisherIndfastest.ret <- fisherIndfastest(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (T) {
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = Q.mat.consol$freq,
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
try( print(summary(fisherInd.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfaster.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfaster.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfastestfurious.ret)) )
try( print(summary(fisherIndfastest.ret - fisherInd.ret)) )
1e+1
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
sessionInfo()
