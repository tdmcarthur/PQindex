Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
8.9000e+01
4.2950e+09
1.0000e+00
4.2950e+09
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
try( print(summary(fisherIndfastest.ret - fisherIndfastestfurious.ret)) )
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
try( print(summary(fisherInd.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfaster.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfaster.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfastestfurious.ret)) )
try( print(summary(fisherIndfastest.ret - fisherInd.ret)) )
try( print(summary(fisherInd.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfaster.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfaster.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfastestfurious.ret)) )
try( print(summary(fisherIndfastest.ret - fisherInd.ret)) )
library(data.table)
library(Matrix)
consol.matrix <- function(x) {
if (!is.data.table(x)) x <- as.data.table(x)
x.ret <- x[, .(.N), by = names(x)]
N.ret <- matrix(x.ret$N, ncol = 1)
x.ret[, N := NULL]
list(mat = as.matrix(x.ret), freq = N.ret)
}
set.seed(100)
# n.col <- 100; n.row = 40000
# With these params, fastest index fn get 77 secs. Faster index fn gets 320 secs (4 times faster):
# n.row.fact <- 20000 ; real.rows.factor = 20 ; n.col <- 400;
# With the below, I have fastest 0.13; faster 0.185; naive 18.4 secs :
n.row.fact <- 1000 ; real.rows.factor = 5 ; n.col <- 100;
# With below, I get fastest 0.013; faster 0.014; naive 112.533:
# n.row.fact <- 100 ; real.rows.factor = 100 ; n.col <- 100;
# n.row.fact <- 10 ; real.rows.factor = 2 ; n.col <- 4;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 3:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
if (F) {
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
}
if (F) {
print(system.time(
fisherIndfast.ret <-
fisherIndfast(Q = Q.mat, P = P.mat,
Q_consol = Q.mat.consol$mat,
P_consol = P.mat.consol$mat,
Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq ) # t(P.mat.consol$freq ))
))
}
if (T) {
print(system.time(
fisherIndfaster.ret <- fisherIndfaster(Q_consol = Q.mat.consol$mat,
P_consol = P.mat.consol$mat,
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (T) {
print(system.time(
fisherIndfastest.ret <- fisherIndfastest(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (T) {
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = Q.mat.consol$freq,
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
try( print(summary(fisherInd.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfaster.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfaster.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfastestfurious.ret)) )
try( print(summary(fisherIndfastest.ret - fisherInd.ret)) )
1e+1
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
sessionInfo()
library(RcppProgress)
library(RcppProgress)
library(PQindex)
library(PQindex)
library(PQindex)
library(PQindex)
library(PQindex)
library(data.table)
library(Matrix)
consol.matrix <- function(x) {
if (!is.data.table(x)) x <- as.data.table(x)
x.ret <- x[, .(.N), by = names(x)]
N.ret <- matrix(x.ret$N, ncol = 1)
x.ret[, N := NULL]
list(mat = as.matrix(x.ret), freq = N.ret)
}
set.seed(100)
# n.col <- 100; n.row = 40000
# With these params, fastest index fn get 77 secs. Faster index fn gets 320 secs (4 times faster):
n.row.fact <- 100000 ; real.rows.factor = 2 ; n.col <- 400;
# n.row.fact <- 100000 ; real.rows.factor = 2 ; n.col <- 10;
# With the below, I have fastest 0.13; faster 0.185; naive 18.4 secs :
# n.row.fact <- 1000 ; real.rows.factor = 5 ; n.col <- 300;
# With below, I get fastest 0.013; faster 0.014; naive 112.533:
# n.row.fact <- 100 ; real.rows.factor = 100 ; n.col <- 100;
# n.row.fact <- 10 ; real.rows.factor = 2 ; n.col <- 4;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 4:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
rm(Q.mat)
rm(P.mat)
if (F) {
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
}
if (F) {
print(system.time(
fisherIndfast.ret <-
fisherIndfast(Q = Q.mat, P = P.mat,
Q_consol = Q.mat.consol$mat,
P_consol = P.mat.consol$mat,
Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq ) # t(P.mat.consol$freq ))
))
}
if (F) {
print(system.time(
fisherIndfaster.ret <- fisherIndfaster(Q_consol = Q.mat.consol$mat,
P_consol = P.mat.consol$mat,
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (F) {
print(system.time(
fisherIndfastest.ret <- fisherIndfastest(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (T) {
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = Q.mat.consol$freq,
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
, split_size = 1e+13
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
if (T) {
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = Q.mat.consol$freq,
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
, split_size = as.matrix(1e+13)
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
}
rm(list = ls())
gc()
gc()
gc()
gc()
gc()
gc()
rm(list = ls())
rm(list = ls())
rm(list = ls())
rm(list = ls())
rm(list = ls())
rm(list = ls())
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
Sys.setenv( "PKG_CXXFLAGS"="-std=c++11" )
library(PQindex)
library(foreign)
test <- read.dbf("/Users/travismcarthur/Downloads/unid_edaf_sii/objetos_edaf_06-11-2013.dbf")
str(test)
head(test)
test2 <- read.dbf(("/Users/travismcarthur/Downloads/unid_edaf_sii/con_nal_06-11-2013.dbf")
)
str(test2)
View(test2)
library("XML")
library("rgeos")
library("rgdal")
library("plyr")
soil.shp <- readOGR("/Users/travismcarthur/Downloads/unid_edaf_sii/con_nal_06-11-2013.shp",
"con_nal_06-11-2013", stringsAsFactors = FALSE)
plot(soil.shp)
plot(soil.shp[1:10, ])
plot(soil.shp[1:20, ])
plot(soil.shp[1:200, ])
plot(soil.shp[1:100, ])
soil2.shp <- readOGR("/Users/travismcarthur/Downloads/unid_edaf_sii/objetos_edaf_06-11-2013.shp",
"objetos_edaf_06-11-2013", stringsAsFactors = FALSE)
plot(soil2.shp)
View(soil.shp@data)
?comment
(1600000 / 8) / 60 /60 / 24
(30000 * 500000 * 400)/8000000/ 60 /60 / 24
(30000 * 500000 * 400)/8000000000/ 60 /60 / 24
(30000 * 500000 * 400)/8000000000/ 60 /60
(1600000 / 8) / 60 /60 / 24 /((30000 * 500000 * 400)/8000000000/ 60 /60 / 24)
266.6667*4/24
?diag
test <- diag(1, nrow =5000)
library(Matrix)
test.sp <- Matrix(test)
system.time(x <- test %*% test)
system.time(y <- test.sp %*% test.sp)
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/becnhmarks.cpp")
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/benchmarks.cpp")
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/benchmarks.cpp")
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/benchmarks.cpp")
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/benchmarks.cpp")
x   <- matrix(sample(c(1, rep(1, 50)), 100000, rep = TRUE), nrow = 100)
x.sp <- Matrix(x)
y <- reg_mat_mult(x)
str(y)
x   <- matrix(sample(c(1, rep(1, 50)), 100000, rep = TRUE), ncol = 100)
x.sp <- Matrix(x)
y <- reg_mat_mult(x)
x   <- matrix(sample(c(1, rep(1, 50)), 1000000, rep = TRUE), ncol = 100)
x.sp <- Matrix(x)
y <- reg_mat_mult(x)
system.time( y.sp <- sp_mat_mult(x.sp))
x   <- matrix(sample(c(1, rep(0, 50)), 1000000, rep = TRUE), ncol = 100)
x.sp <- Matrix(x)
system.time( y <- reg_mat_mult(x) )
system.time( y.sp <- sp_mat_mult(x.sp))
x   <- matrix(sample(c(1, rep(0, 50)), 1000000, rep = TRUE), ncol = 100)
x.sp <- Matrix(x)
system.time( y <- reg_mat_mult(x) )
system.time( y.sp <- sp_mat_mult(x.sp))
head(x )
x   <- matrix(sample(c(1, rep(0, 200)), 1000000, rep = TRUE), ncol = 100)
x.sp <- Matrix(x)
system.time( y <- reg_mat_mult(x) )
system.time( y.sp <- sp_mat_mult(x.sp))
x   <- matrix(sample(c(1, rep(0, 200)), 1000000, rep = TRUE), ncol = 100)
x.sp <- Matrix(x)
system.time( y <- reg_mat_mult(x) )
system.time( y.sp <- sp_mat_mult(x.sp))
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/benchmarks.cpp")
x   <- matrix(sample(c(1, rep(0, 200)), 1000000, rep = TRUE), ncol = 100)
x.sp <- Matrix(x)
system.time( y <- reg_mat_mult(x) )
system.time( y.sp <- sp_mat_mult(x.sp))
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/benchmarks.cpp")
x   <- matrix(sample(c(1, rep(0, 200)), 1000000, rep = TRUE), ncol = 100)
x.sp <- Matrix(x)
system.time( y <- reg_mat_mult(x) )
system.time( y.sp <- sp_mat_mult(x.sp))
n.row.fact <- 500 ; real.rows.factor = 1 ; n.col <- 400;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 4:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
library(data.table)
library(Matrix)
consol.matrix <- function(x) {
if (!is.data.table(x)) x <- as.data.table(x)
x.ret <- x[, .(.N), by = names(x)]
N.ret <- matrix(x.ret$N, ncol = 1)
x.ret[, N := NULL]
list(mat = as.matrix(x.ret), freq = N.ret)
}
set.seed(100)
# n.col <- 100; n.row = 40000
# With these params, fastest index fn get 77 secs. Faster index fn gets 320 secs (4 times faster):
#  n.row.fact <- 100000 ; real.rows.factor = 2 ; n.col <- 400;
# n.row.fact <- 100000 ; real.rows.factor = 2 ; n.col <- 10;
# With the below, I have fastest 0.13; faster 0.185; naive 18.4 secs :
# n.row.fact <- 1000 ; real.rows.factor = 5 ; n.col <- 300;
# With below, I get fastest 0.013; faster 0.014; naive 112.533:
# n.row.fact <- 100 ; real.rows.factor = 100 ; n.col <- 100;
# n.row.fact <- 10 ; real.rows.factor = 2 ; n.col <- 4;
n.row.fact <- 500 ; real.rows.factor = 1 ; n.col <- 400;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 4:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
str(Q.mat.consol)
str(Q.mat)
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
library(Rcpp)
Rcpp::sourceCpp("~/git/PQindex/PQindex/src/fisherInd.cpp")
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
set.seed(100)
# n.col <- 100; n.row = 40000
# With these params, fastest index fn get 77 secs. Faster index fn gets 320 secs (4 times faster):
#  n.row.fact <- 100000 ; real.rows.factor = 2 ; n.col <- 400;
# n.row.fact <- 100000 ; real.rows.factor = 2 ; n.col <- 10;
# With the below, I have fastest 0.13; faster 0.185; naive 18.4 secs :
# n.row.fact <- 1000 ; real.rows.factor = 5 ; n.col <- 300;
# With below, I get fastest 0.013; faster 0.014; naive 112.533:
# n.row.fact <- 100 ; real.rows.factor = 100 ; n.col <- 100;
# n.row.fact <- 10 ; real.rows.factor = 2 ; n.col <- 4;
n.row.fact <- 500 ; real.rows.factor = 1 ; n.col <- 400;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 4:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
dim(Q.mat.consol )
str(Q.mat.consol )
dim(Q.mat)
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = Q.mat.consol$freq,
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
#, split_size = 1e+13
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
print(system.time(
fisherIndfastestfurious.ret <- fisherIndfastestfurious(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = Q.mat.consol$freq,
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
#, split_size = 1e+13
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
n.row.fact <- 1000 ; real.rows.factor = 1 ; n.col <- 400;
n.row = real.rows.factor; n.row = n.row * n.row.fact
n.real.rows = n.row / real.rows.factor
P.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
P.mat <- rbind(P.mat[-1, ], P.mat[1, ])
#P.mat <- rbind(P.mat[1, ], P.mat[1, ], P.mat[2, ], P.mat[2, ])
#P.mat <- matrix(runif(n.col*n.row), nrow = n.row )
# Q.mat <- matrix(runif(n.col*n.row), ncol = n.col)
Q.mat <- matrix(runif(n.real.rows*n.col), ncol = n.col, nrow = n.row, byrow = TRUE )
Q.mat[, 4:ncol(Q.mat)] <- 0
# Making the matrix sparse
Q.mat.consol <- consol.matrix(Q.mat)
P.mat.consol <- consol.matrix(P.mat)
print( system.time( fisherInd.ret <- fisherInd(Q.mat, P.mat, 1) ) )
print(system.time(
fisherIndfastest.ret <- fisherIndfastest(
# Q_consol = Q.mat.consol$mat,
# P_consol = P.mat.consol$mat,
Q_consol = Matrix(Q.mat.consol$mat, sparse = TRUE),
P_consol = Matrix(P.mat.consol$mat, sparse = TRUE),
Q_freq = t(Q.mat.consol$freq),
#Q_freq = Q.mat.consol$freq,
P_freq = P.mat.consol$freq,
Q_ind = rep((1:n.real.rows) - 1, real.rows.factor),
P_ind = rep((1:n.real.rows) - 1, real.rows.factor))
# P_ind = c(rep((1:n.real.rows) - 1, real.rows.factor)[-1], 0))
))
dim(Q.mat.consol$mat)
dim(Q.mat)
16/6
26600*4/24/365
try( print(summary(fisherInd.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfaster.ret - fisherIndfast.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfaster.ret)) )
try( print(summary(fisherIndfastest.ret - fisherIndfastestfurious.ret)) )
try( print(summary(fisherIndfastest.ret - fisherInd.ret)) )
